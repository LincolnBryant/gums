#!/bin/sh

# Detects where gums is installed and puts the directory
# name in ScriptPath. Then cd to that directory.

ScriptPath=""
CommandPath=`dirname $0`
if [ $CommandPath = "." ]
then

    # The command path is the current directory:
    # check if file is really here

    if [ ! -e "$0" ]
    then
        # The command is not in the current directory:
        # must have used the path.
        # Locating with which.

        WhichFull=`which $0`
        WhichPath=`dirname $WhichFull`
        ScriptPath=$WhichPath
        GumsPath=`dirname $ScriptPath`
    else
        # It was really the current directory
        ScriptPath=$CommandPath
        GumsPath=".."
    fi
else
    ScriptPath=$CommandPath
    GumsPath=`dirname $ScriptPath`
fi

cd $ScriptPath

usage() {
	echo "Creates the database for GUMS on localhost"
	echo "Usage: $0 --user <mysql user for GUMS> "
	echo "          --password  <GUMS mysql password>"
	echo "          --host <GUMS server host>"
	echo "          --socket <MySQL socket> [optional]"
	echo "          --noprompt [Don't prompt user, optional]"
	echo "          --help [Print this message]"
	echo
	echo "Examples:"
	echo "  $0 --user gums --host gums.mysite.com:49151 --password secret"
	echo
	echo "This will make mysql authenticate as root with a password (-p), "
	echo "create a <gums> user with password <secret> authorized to "
	echo "connect from <gums.mysite.com>."
	exit -1;
}

#-------------------------------------------
#
# Setup global variables
#
#-------------------------------------------
USER=""
SERVER=""
PASSWORD=""
PROMPT=1
SOCKET=""
SHOW_USAGE=0
MYSQLPARAM=""

#-------------------------------------------
#
# Parse command line
#
#-------------------------------------------
while [ $# -gt 0 ]
do
  case "$1" in 
	  --noprompt) PROMPT=0;;
	  --user)     USER="$2";     shift;;
      --password) PASSWORD="$2"; shift;;
      --host)     SERVER="$2";   shift;;
      --socket)   SOCKET="$2";   shift;;
      --help)     usage;;
      -help)     usage;;
      -h)         usage;;
      *)          echo "Invalid parameter '$1'"; usage;;
  esac
  shift
done

if [ -z "$USER" ] 
then
	echo "Missing parameter: You must specify the GUMS user with --user"
	SHOW_USAGE=1
fi

if [ -z "$PASSWORD" ] 
then
	echo "Missing parameter: You must specify the GUMS password with --password"
	SHOW_USAGE=1
fi

if [ -z "$SERVER" ] 
then
	echo "Missing parameter: You must specify the GUMS host with --host"
	SHOW_USAGE=1
fi

if [ "$SHOW_USAGE" -eq 1 ]
then
	echo ""
	usage
fi

#-------------------------------------------
#
# Construct MySQL parameters
#
#-------------------------------------------
if [ "$PROMPT" -eq 1 ]
then
	MYSQLPARAM="-u root -p"
else
	# When the root doesn't have a password
	# (like in the VDT setup), -u root doesn't
	# cause a prompt.
	MYSQLPARAM="-u root"
fi

if [ -n "$SOCKET" ]
then
	MYSQLPARAM="${MYSQLPARAM} -S $SOCKET"
fi

#-------------------------------------------
#
# Verify what we are about to do
#
#-------------------------------------------
if [ "$PROMPT" -eq 1 ]
then
	echo Creating GUMS 1.0 database with the following parameters:
	echo GUMS mysql user to be created: \"$USER\"
	echo GUMS server host: \"$SERVER\"
	echo
	echo "Is this correct? (Enter 'yes' to proceed)"

	read response
	if [ "$response" != "yes" ]
		then
		exit -1
	fi
fi

#-------------------------------------------
#
# Setup the MySQL Database AND 
# Add GIP Probe identity to the MySQL Database
#
#-------------------------------------------
echo
echo Preparing database:
if [ "$PROMPT" -eq 1 ]
then
	echo Enter the root mysql password
fi

cat ../sql/setupDatabase.mysql       \
    ../sql/addGIPProbeIDtoDatabase.mysql       \
  | /bin/sed -e s/@USER@/$USER/g         \
             -e s/@SERVER@/$SERVER/g     \
             -e s/@PASSWORD@/$PASSWORD/g \
  | mysql $MYSQLPARAM

#-------------------------------------------
#
# Create the gums.config
#
#-------------------------------------------
echo Preparing gums.config from template
if [ -e ../config/gums.config ]
then
	if [ "$PROMPT" -eq 1 ]
	then
		echo "WARNING: gums.config already present. Would you like to overwrite it? "
		echo "(Enter 'yes' to overwrite)"
		read response
		if [ "$response" != "yes" ]
		then
			exit -1
		fi
	fi
fi

DOMAINNAME=`echo "$SERVER" | awk 'BEGIN{FS=":"}{print $1}' | awk 'BEGIN{FS="."}{for(i=2;i<=NF;i++) printf(i<NF?"%s.":"%s\n",$i)}'`

cat ../gums.config.template \
  | /bin/sed -e s/@USER@/$USER/g                    \
             -e s/@SERVER@/$SERVER/g                \
             -e s/@PASSWORD@/$PASSWORD/g            \
             -e s/@DOMAINNAME@/$DOMAINNAME/g        \
  > ../config/gums.config
